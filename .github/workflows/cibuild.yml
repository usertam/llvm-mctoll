name: CI

on:
  workflow_dispatch:
  push:
  pull_request:
    branches:
    - master

jobs:
  Debug-Build:
    runs-on: ubuntu-latest

    steps:
    - name: prerequisites
      run: |
        echo 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic main' | sudo tee -a /etc/apt/sources.list
        sudo apt update
        sudo apt install -y ninja-build clang
        # To generate ARM binaries (via cross compilation) for tests
        sudo apt install -y gcc-multilib
        sudo apt install -y gcc-multilib-arm-linux-gnueabi
        sudo update-alternatives --install /usr/bin/cc  cc  /usr/bin/clang 200
        sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++ 200
      shell: bash
    - name: clone
      run: |
        # Clone LLVM Monorepo
        git clone --depth 10000 -b master https://github.com/llvm/llvm-project.git .
        # Clone llvm-mctoll
        git clone https://github.com/$GITHUB_REPOSITORY llvm/tools/llvm-mctoll
        # Set the tip of llvm-mctoll
        pushd llvm/tools/llvm-mctoll && git checkout master && popd
        # Set the version of LLVM Monorepo to use for build based on $GITHUB_WORKSPACE/llvm/tools/llvm-mctoll/LLVMVersion.txt
        LLVM_MONOREPO_COMMIT="$(awk '/commit/ {print $2}' $GITHUB_WORKSPACE/llvm/tools/llvm-mctoll/LLVMVersion.txt)"
        echo "Using LLVM Monorepo commit commit $LLVM_MONOREPO_COMMIT"
        git checkout $LLVM_MONOREPO_COMMIT
        # Create debug build directory
        mkdir -p build/Debug
    - run: |
        echo "::add-matcher::$GITHUB_WORKSPACE/llvm/tools/llvm-mctoll/.github/cpp.json"
    - name: Debug Build and Test
      working-directory: build/Debug
      run: cmake -G Ninja -DLLVM_TARGETS_TO_BUILD="X86;ARM" -DLLVM_ENABLE_PROJECTS="clang;lld" -DLLVM_ENABLE_ASSERTIONS=ON -DCMAKE_BUILD_TYPE=Debug ../../llvm &&  ninja clang && ninja opt &&  ninja lld && ninja check-mctoll
      shell: bash
    - name: Upload artifacts
      uses: actions/upload-artifact@v1
      with:
        name: llvm-mctoll-Debug
        path: build/Debug/bin/llvm-mctoll

  Release-Build:
    runs-on: ubuntu-latest

    steps:
    - name: prerequisites
      run: |
        echo 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic main' | sudo tee -a /etc/apt/sources.list
        sudo apt update
        sudo apt install -y ninja-build clang
        # To generate ARM binaries (via cross compilation) for tests
        sudo apt install -y gcc-multilib
        sudo apt install -y gcc-multilib-arm-linux-gnueabi
        sudo update-alternatives --install /usr/bin/cc  cc  /usr/bin/clang 200
        sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++ 200
      shell: bash
    - name: clone
      run: |
        # Clone LLVM Monorepo
        git clone --depth 10000 -b master https://github.com/llvm/llvm-project.git .
        # Clone llvm-mctoll
        git clone https://github.com/$GITHUB_REPOSITORY llvm/tools/llvm-mctoll
        # Set the tip of llvm-mctoll
        pushd llvm/tools/llvm-mctoll && git checkout master && popd
        # Set the version of LLVM Monorepo to use for build based on $GITHUB_WORKSPACE/llvm/tools/llvm-mctoll/LLVMVersion.txt
        LLVM_MONOREPO_COMMIT="$(awk '/commit/ {print $2}' $GITHUB_WORKSPACE/llvm/tools/llvm-mctoll/LLVMVersion.txt)"
        echo "Using LLVM Monorepo commit commit $LLVM_MONOREPO_COMMIT"
        git checkout $LLVM_MONOREPO_COMMIT
        # Create debug build directory
        mkdir -p build/Release
    - run: |
        echo "::add-matcher::$GITHUB_WORKSPACE/llvm/tools/llvm-mctoll/.github/cpp.json"
    - name: Release Build and Test
      working-directory: build/Release
      run: cmake -G Ninja -DLLVM_TARGETS_TO_BUILD="X86;ARM" -DLLVM_ENABLE_PROJECTS="clang;lld" -DLLVM_ENABLE_ASSERTIONS=ON -DCMAKE_BUILD_TYPE=Release ../../llvm &&  ninja clang && ninja opt &&  ninja lld && ninja check-mctoll
      shell: bash
    - name: Upload artifacts
      uses: actions/upload-artifact@v1
      with:
        name: llvm-mctoll-Release
        path: build/Release/bin/llvm-mctoll
